{"version":3,"sources":["common/Checkbox.js","components/context.js","components/Header.js","components/Post.js","components/PostList.js","components/Footer.js","components/reducer.js","components/App.js","serviceWorker.js","index.js"],"names":["Checkbox","checked","changeTheme","className","onClick","Context","React","createContext","Header","check","changeType","dispatch","useContext","useEffect","console","log","href","type","payload","memo","title","body","name","email","useState","num","setNum","green","setGreen","countSum","useMemo","n","style","color","PostList","posts","length","map","post","key","id","Footer","Date","getFullYear","state","action","theme","App","ref","useRef","useReducer","reducer","setTimeout","document","fetch","then","response","json","Provider","value","current","focus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57561db5.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Checkbox ({checked, changeTheme}) {\n  return (\n    <div className=\"checkbox\">\n      <label \n        className={`custom-checkbox ${checked ? 'checked' : ''}`} \n        onClick={changeTheme}\n      >\n        <span className=\"custom-checkbox-button\"></span>\n      </label>\n    </div>\n  )\n}\n\nexport default Checkbox","import React from 'react';\r\n\r\nexport const Context = React.createContext();","import React, { useContext, useEffect} from 'react'\nimport Checkbox from '../common/Checkbox'\nimport {Context} from './context'\n\n\n\nfunction Header({check, changeType, changeTheme}) {\n  const {dispatch} = useContext(Context)\n\n  useEffect(() => {\n    console.log('update')\n  }, [changeType])\n\n\n  return (\n    <header className=\"blog-header\" >\n      <div className=\"layout layout-header\" >\n        <div className=\"blog-logo\">\n          <a href=\"/\">IT Блог</a>\n        </div>\n        <div className=\"tabs\">\n        <button onClick={() => dispatch({type: 'users', payload: 'users'})}>Пользователи</button>\n        <button onClick={() => dispatch({type: 'posts', payload: 'posts'})}>Посты</button>\n        </div>\n        <Checkbox \n            checked={check} \n            changeTheme={() => dispatch({type: 'theme'})}\n            // changeTheme={() => changeTheme()}\n        />\n      </div>\n  </header>\n  )\n}\n\nexport default Header","import React, {useState, useMemo, useContext} from 'react'\nimport {Context} from './context';\n\n\nfunction sum(n){\n  console.log(n)\n  return n + 1\n}\n\nfunction Post({title, body, name, email}) {\n  // const {changeTheme} = useContext(Context)\n  const [num, setNum] = useState(0);\n  const [green, setGreen] = useState('false');\n  const countSum = useMemo(() => sum(num), [num]);\n  const {dispatch} = useContext(Context)\n\n\n  // console.log('post')\n  return(\n    <div className=\"article-content\">\n    <div className=\"article-title\">\n        <a href=\"/\">{title}</a>\n        <a href=\"/\">{name}</a>\n    </div>\n      <p className=\"article-text\" style={{color: green ? 'green' : 'red'}} onClick={() => setGreen()}> \n      {/* т.е. меняя цвет(кликая) у нас перезапускается вся функция Post и также перезапускается функц. countSum, оборачиваем вызываемую функцию в useMemo */}\n          {body}\n          {email}\n      </p>\n      {countSum}\n      <button onClick={() => setNum(num + 1)} >+</button>\n      <button onClick={() => dispatch({type: 'theme'})}>Theme</button>\n    </div>\n  ) \n}\n\nexport default React.memo(Post)  // если значения приходящие через пропсы не меняются, то memo их кэширует и не перередеривается","import React from 'react'\nimport Post from './Post'\n\nfunction PostList({posts}) {\n  \n  return (\n        <div className=\"blog-content layout\">\n            { posts.length ? posts.map(post => <Post key={post.id} {...post}/>) : \"Нет записей\" }\n        </div>\n  )\n}\n\nexport default PostList","import React from 'react'\n\nfunction Footer() {\n    return (\n        <footer className=\"blog-footer layout\">\n            @ {new Date().getFullYear()} IT Блог\n        </footer>\n    )\n}\n\nexport default Footer","export default function(state, action){\r\n    switch (action.type) {\r\n        case 'fetch':\r\n            return {\r\n                ...state,\r\n                posts: action.payload\r\n            }\r\n        case 'users':\r\n            return {\r\n                ...state,\r\n                type: action.payload\r\n            }\r\n        case 'posts':\r\n            return {\r\n                ...state,\r\n                type: action.payload\r\n            }\r\n        case 'theme':\r\n            return {\r\n                ...state,\r\n                theme: state.theme === 'dark' ? 'light' : 'dark',\r\n                check: !state.check\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import React, {useState, useEffect, useRef, useReducer, useMemo} from 'react'\nimport Header from './Header'\nimport PostList from './PostList'\nimport Footer from './Footer'\nimport { Context } from './context'\nimport reducer from './reducer'\n\n// const initPost = [\n//   {\n//       id: 1,\n//       title: \"Title\",\n//       body: \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Corporis quaerat autem eos fuga voluptas deserunt laudantium! Similique delectus consequuntur, magni perferendis quam assumenda recusandae, facilis aliquid, eius provident eveniet architecto!\"\n//   },\n//   {\n//       id: 2,\n//       title: \"Title\",\n//       body: \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Corporis quaerat autem eos fuga voluptas deserunt laudantium! Similique delectus consequuntur, magni perferendis quam assumenda recusandae, facilis aliquid, eius provident eveniet architecto!\"\n//   },\n//   {\n//       id: 3,\n//       title: \"Title\",\n//       body: \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Corporis quaerat autem eos fuga voluptas deserunt laudantium! Similique delectus consequuntur, magni perferendis quam assumenda recusandae, facilis aliquid, eius provident eveniet architecto!\"\n//   },\n//   {\n//       id: 5,\n//       title: \"Title\",\n//       body: \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Corporis quaerat autem eos fuga voluptas deserunt laudantium! Similique delectus consequuntur, magni perferendis quam assumenda recusandae, facilis aliquid, eius provident eveniet architecto!\"\n//   },\n//   {\n//       id: 6,\n//       title: \"Title\",\n//       body: \"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Corporis quaerat autem eos fuga voluptas deserunt laudantium! Similique delectus consequuntur, magni perferendis quam assumenda recusandae, facilis aliquid, eius provident eveniet architecto!\"\n//   }\n// ]\n\nfunction App() {\n\n  const ref = useRef(null)\n  // const [posts, setPost] = useState([])\n  // const [theme, setTheme] = useState('light')\n  // const [check, setCheck] = useState(false);\n  // const [type, setType] = useState('posts')\n  const [state, dispatch] = useReducer(reducer, {posts: [], check: false, type: 'posts', theme: 'light'})\n\n  useEffect(() => {\n    setTimeout(() => {\n      document.title = `Page ${state.type}`\n    }, 300);\n    fetch(`https://jsonplaceholder.typicode.com/${state.type}`)\n      .then(response => response.json())\n      .then(json => \n        dispatch({type: 'fetch', payload: json}))\n      return () => {\n        document.title = 'Page'  // пример работы componentWillUnmount, т.е. после перерисовки(удаления компонента) перед появлением нового и вызывается этот return\n      }\n  },[state.type]);\n\n  // const changeTheme = () => {\n  //   setTheme(theme === 'light' ? 'dark' : 'light');\n  //   setCheck(!check)\n  // }\n \n  const handleFocus = () => {  \n    console.log(ref.current.focus());\n    // ref.current.style.color = 'red';\n  }\n\n\n  return (\n    <Context.Provider value={\n      {dispatch\n      // changeTheme\n      }\n    }>\n      <div className={`app ${state.theme}`}>\n      <div className='form'>\n        <input ref={ref}/>\n        <button onClick={handleFocus}>focus</button> \n      </div>\n      <Header  check={state.check} \n        // changeTheme={state.change}\n      />\n      <PostList posts={state.posts}/>\n      <Footer />\n    </div>\n    </Context.Provider>\n  )\n  \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}